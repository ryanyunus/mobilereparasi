<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>